import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Switch } from '@/components/ui/switch';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { ChevronDown, Link, Settings, BarChart3, Lock, Smartphone } from 'lucide-react';
import { useFormValidation } from '@/hooks/useFormValidation';
import { linkSchema, LinkFormData } from '@/lib/validations';
import { useAsync } from '@/hooks/useAsync';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

interface ImprovedLinkFormProps {
  onSuccess?: (link: any) => void;
  onCancel?: () => void;
}

export function ImprovedLinkForm({ onSuccess, onCancel }: ImprovedLinkFormProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [enablePassword, setEnablePassword] = useState(false);
  const [enableExpiration, setEnableExpiration] = useState(false);
  const [enableUTM, setEnableUTM] = useState(false);
  const [enableDeepLinks, setEnableDeepLinks] = useState(false);
  
  const { execute: createLink, loading } = useAsync();

  const { form, handleSubmit, errors } = useFormValidation(linkSchema, {
    onSuccess: async (data) => {
      if (!user) throw new Error('Usuário não autenticado');

      // Get user's default workspace
      const { data: workspaces } = await supabase
        .from('workspaces')
        .select('id')
        .eq('owner_id', user.id)
        .limit(1);

      if (!workspaces || workspaces.length === 0) {
        throw new Error('Nenhum workspace encontrado');
      }

      const linkData = {
        original_url: data.original_url,
        title: data.title,
        user_id: user.id,
        workspace_id: workspaces[0].id,
        short_slug: data.custom_slug || '', // Will be generated by the database if empty
        custom_slug: !!data.custom_slug, // Boolean flag for custom slug usage
        password_protected: enablePassword && !!data.password,
        expires_at: enableExpiration ? data.expires_at : null,
        password: enablePassword ? data.password : null,
        utm_source: enableUTM ? data.utm_source : null,
        utm_medium: enableUTM ? data.utm_medium : null,
        utm_campaign: enableUTM ? data.utm_campaign : null,
        utm_term: enableUTM ? data.utm_term : null,
        utm_content: enableUTM ? data.utm_content : null,
        deep_link_ios: enableDeepLinks ? data.deep_link_ios : null,
        deep_link_android: enableDeepLinks ? data.deep_link_android : null,
        max_clicks: data.max_clicks,
        tags: data.tags,
        ab_test_urls: data.ab_test_urls,
        ab_test_weights: data.ab_test_weights,
      };

      const newLink = await createLink(async () => {
        const { data: link, error } = await supabase
          .from('links')
          .insert([linkData])
          .select()
          .single();

        if (error) throw error;
        return link;
      });

      toast({
        title: 'Sucesso!',
        description: 'Link criado com sucesso',
      });

      onSuccess?.(newLink);
    },
  });

  return (
    <Card className="w-full max-w-2xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Link className="w-5 h-5" />
          Criar novo link
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* URL Original */}
          <div className="space-y-2">
            <Label htmlFor="original_url">URL Original *</Label>
            <Input
              id="original_url"
              placeholder="https://exemplo.com"
              {...form.register('original_url')}
            />
            {errors.original_url && (
              <p className="text-sm text-destructive">{errors.original_url.message}</p>
            )}
          </div>

          {/* Título */}
          <div className="space-y-2">
            <Label htmlFor="title">Título (opcional)</Label>
            <Input
              id="title"
              placeholder="Título do link"
              {...form.register('title')}
            />
            {errors.title && (
              <p className="text-sm text-destructive">{errors.title.message}</p>
            )}
          </div>

          {/* Slug personalizado */}
          <div className="space-y-2">
            <Label htmlFor="custom_slug">Slug personalizado (opcional)</Label>
            <Input
              id="custom_slug"
              placeholder="meu-link-personalizado"
              {...form.register('custom_slug')}
            />
            {errors.custom_slug && (
              <p className="text-sm text-destructive">{errors.custom_slug.message}</p>
            )}
          </div>

          {/* Configurações avançadas */}
          <Collapsible open={showAdvanced} onOpenChange={setShowAdvanced}>
            <CollapsibleTrigger asChild>
              <Button variant="ghost" className="w-full justify-between">
                <span className="flex items-center gap-2">
                  <Settings className="w-4 h-4" />
                  Configurações avançadas
                </span>
                <ChevronDown className={`w-4 h-4 transition-transform ${showAdvanced ? 'rotate-180' : ''}`} />
              </Button>
            </CollapsibleTrigger>
            <CollapsibleContent className="space-y-6 pt-4">
              <Tabs defaultValue="security" className="w-full">
                <TabsList className="grid w-full grid-cols-4">
                  <TabsTrigger value="security">
                    <Lock className="w-4 h-4 mr-1" />
                    Segurança
                  </TabsTrigger>
                  <TabsTrigger value="utm">
                    <BarChart3 className="w-4 h-4 mr-1" />
                    UTM
                  </TabsTrigger>
                  <TabsTrigger value="mobile">
                    <Smartphone className="w-4 h-4 mr-1" />
                    Mobile
                  </TabsTrigger>
                  <TabsTrigger value="limits">Limites</TabsTrigger>
                </TabsList>

                <TabsContent value="security" className="space-y-4">
                  {/* Proteção por senha */}
                  <div className="flex items-center justify-between">
                    <Label htmlFor="enable-password">Proteger com senha</Label>
                    <Switch
                      id="enable-password"
                      checked={enablePassword}
                      onCheckedChange={setEnablePassword}
                    />
                  </div>
                  {enablePassword && (
                    <div className="space-y-2">
                      <Input
                        placeholder="Digite a senha"
                        type="password"
                        {...form.register('password')}
                      />
                      {errors.password && (
                        <p className="text-sm text-destructive">{errors.password.message}</p>
                      )}
                    </div>
                  )}

                  {/* Data de expiração */}
                  <div className="flex items-center justify-between">
                    <Label htmlFor="enable-expiration">Data de expiração</Label>
                    <Switch
                      id="enable-expiration"
                      checked={enableExpiration}
                      onCheckedChange={setEnableExpiration}
                    />
                  </div>
                  {enableExpiration && (
                    <div className="space-y-2">
                      <Input
                        type="datetime-local"
                        {...form.register('expires_at')}
                      />
                      {errors.expires_at && (
                        <p className="text-sm text-destructive">{errors.expires_at.message}</p>
                      )}
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="utm" className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label>Parâmetros UTM</Label>
                    <Switch
                      checked={enableUTM}
                      onCheckedChange={setEnableUTM}
                    />
                  </div>
                  {enableUTM && (
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="utm_source">Fonte</Label>
                        <Input
                          id="utm_source"
                          placeholder="google"
                          {...form.register('utm_source')}
                        />
                      </div>
                      <div>
                        <Label htmlFor="utm_medium">Meio</Label>
                        <Input
                          id="utm_medium"
                          placeholder="cpc"
                          {...form.register('utm_medium')}
                        />
                      </div>
                      <div>
                        <Label htmlFor="utm_campaign">Campanha</Label>
                        <Input
                          id="utm_campaign"
                          placeholder="promocao-verao"
                          {...form.register('utm_campaign')}
                        />
                      </div>
                      <div>
                        <Label htmlFor="utm_term">Termo</Label>
                        <Input
                          id="utm_term"
                          placeholder="termo-chave"
                          {...form.register('utm_term')}
                        />
                      </div>
                      <div className="col-span-2">
                        <Label htmlFor="utm_content">Conteúdo</Label>
                        <Input
                          id="utm_content"
                          placeholder="banner-principal"
                          {...form.register('utm_content')}
                        />
                      </div>
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="mobile" className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label>Deep Links</Label>
                    <Switch
                      checked={enableDeepLinks}
                      onCheckedChange={setEnableDeepLinks}
                    />
                  </div>
                  {enableDeepLinks && (
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="deep_link_ios">Deep Link iOS</Label>
                        <Input
                          id="deep_link_ios"
                          placeholder="myapp://path"
                          {...form.register('deep_link_ios')}
                        />
                        {errors.deep_link_ios && (
                          <p className="text-sm text-destructive">{errors.deep_link_ios.message}</p>
                        )}
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="deep_link_android">Deep Link Android</Label>
                        <Input
                          id="deep_link_android"
                          placeholder="myapp://path"
                          {...form.register('deep_link_android')}
                        />
                        {errors.deep_link_android && (
                          <p className="text-sm text-destructive">{errors.deep_link_android.message}</p>
                        )}
                      </div>
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="limits" className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="max_clicks">Máximo de cliques (opcional)</Label>
                    <Input
                      id="max_clicks"
                      type="number"
                      placeholder="1000"
                      {...form.register('max_clicks', { valueAsNumber: true })}
                    />
                    {errors.max_clicks && (
                      <p className="text-sm text-destructive">{errors.max_clicks.message}</p>
                    )}
                  </div>
                </TabsContent>
              </Tabs>
            </CollapsibleContent>
          </Collapsible>

          {/* Botões de ação */}
          <div className="flex gap-2">
            <Button type="submit" disabled={loading} className="flex-1">
              {loading ? 'Criando...' : 'Criar Link'}
            </Button>
            {onCancel && (
              <Button type="button" variant="outline" onClick={onCancel}>
                Cancelar
              </Button>
            )}
          </div>
        </form>
      </CardContent>
    </Card>
  );
}